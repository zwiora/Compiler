# Elliptic Curve calculator
#
# The calculator has 4 internal registers, each containing an elliptic curve point
# By default the content of the registers is undefined.
# 
# Supported operations: (op)
#  0 - Load G into register [operand = reg dst]
#  1 - Load custom (x, y) into register [operands = reg dst, x, y]
#  4 - Print point from register [operand = reg src]
#  5 - Check point on curve [operand = reg src], returns 0 or 1
#  8 - Copy point between registers [operands = reg dst, reg src]
#  9 - Negate point in register [operand = reg srcdst]
#  10 - Add points on curve [operands = reg src1dst, reg src2]
#  12 - Multiply point by scalar [operands = reg srcdst, scalar]
#  999 - exit
# 
# Usage:
# ? [p]
# ? [q]
# ? [A]
# ? [B]
# ? [x]
# ? [y]
# loop
#   ? [op]
#   [execute op]
#   [if op = 4]
#   > [x] > [y]
# until op == 999
#

PROCEDURE de(m,n,x,y,z) IS
  a,b,r,s,reszta,iloraz,rr,ss,tmp
IN
  a:=m;
  b:=n;
  x:=1;
  y:=0;
  r:=n;
  s:=m-1;
  WHILE b>0 DO
    # niezmiennik: NWD(m,n)=NWD(a,b) i a=mx-ny i b=mr-ns
    reszta:=a%b;
    iloraz:=a/b;
    a:=b;
    b:=reszta;
    rr:=r;
    tmp:=iloraz*r;
    IF x<tmp THEN
      r:=n*iloraz;
    ELSE
      r:=0;
    ENDIF
    r:=r+x;
    r:=r-tmp;
    ss:=s;
    tmp:=iloraz*s;
    IF y<tmp THEN
      s:=m*iloraz;
    ELSE
      s:=0;
    ENDIF
    s:=s+y;
    s:=s-tmp;
    x:=rr;
    y:=ss;
  ENDWHILE
  z:=a;
END

# r = 1/x mod p
PROCEDURE inverse(r, x, p) IS
  ta, tb
IN
  de(x, p, r, ta, tb);
END

# r = x^y mod p
PROCEDURE power(r, x, y, p) IS
  pot,wyk,o
IN
  r:=1;
  wyk:=y;
  pot:=x%p;
  WHILE wyk>0 DO
	  o:=wyk%2;
	  IF o=1 THEN
	    r:=r*pot;
	    r:=r%p;
	  ENDIF
	  wyk:=wyk/2;
	  pot:=pot*pot;
	  pot:=pot%p;
  ENDWHILE
END

# check y^2 = x^3 + Ax + B (r = 0 or 1)
PROCEDURE ec_check(r, x, y, a, b, p) IS
  zc, lhs, rhs, tmp
IN
  # zero-check - (0,0) is on curve as infinity
  zc := x + y;
  IF zc = 0 THEN
    r := 1;
  ELSE
    lhs := y * y;
    lhs := lhs % p;
    rhs := x * x;
    rhs := rhs * x;
    rhs := rhs % p;
    tmp := a * x;
    tmp := tmp % p;
    rhs := rhs + tmp;
    rhs := rhs + b;
    rhs := rhs % p;
    IF rhs = lhs THEN r := 1; ELSE r := 0; ENDIF
  ENDIF
END

# Negate point (x,y) in-place
PROCEDURE ec_negate(x, y, a, b, p) IS
IN
  y := p - y;
  y := y % p;
END

# Add points (ax, ay) and (bx, by) into (ax, ay)
PROCEDURE ec_add(ax, ay, bx, by, a, b, p) IS
  zca, zcb, lambda, compute
IN
  # Zero-checks for point at infinity
  zca := ax + ay;
  zcb := bx + by;
  zca := zca * zcb;
  IF zca = 0 THEN
    ax := ax + bx; ay := ay + by; # return either (ax, ay) or (bx, by) w/e's not 0
  ELSE 
    IF ax = bx THEN  # point doubling or complementary
      IF ay = by THEN  # point doubling
        compute := 1;
        # lambda := (3x^2+a)/2y
        lambda := ax*ax;
        lambda := lambda*3;
        lambda := lambda+a;
        zca := ay+ay;
        inverse(zcb, zca, p);
        lambda := lambda*zcb;
        lambda := lambda%p;
      ELSE  # complementary points
        compute := 0;
        ax := 0;
        ay := 0;
      ENDIF
    ELSE
      compute := 1;
      # lambda := (ay-by)/(ax-bx)
      lambda := p+ay;
      lambda := lambda-by;
      zca := p+ax;
      zca := zca-bx;
      inverse(zcb, zca, p);
      lambda := lambda*zcb;
      lambda := lambda%p;
    ENDIF
    IF compute = 1 THEN
      zca := lambda*lambda;
      zca := zca + p;
      zca := zca - ax;
      zca := zca + p;
      zca := zca - bx;
      zca := zca % p;
      zcb := ax + p;
      zcb := zcb - zca;
      zcb := zcb * lambda;
      zcb := zcb - ay;
      zcb := zcb % p;
      ax := zca;
      ay := zcb;
    ENDIF
  ENDIF
END

PROCEDURE ec_mul(x, y, s, a, b, p) IS
  rax, ray, rbx, rby, ts, st, bit, m
IN
  rax := 0; ray := 0;
  rbx := x; rby := y;
  # Flip bits of s:
  ts := s; st := 0; m := 0;
  WHILE ts > 0 DO
    bit := ts % 2;
    ts := ts / 2;
    st := st + bit;
    st := st * 2;
    m := m + 1;
  ENDWHILE
  st := st / 2;  # Undo the last shift

  WHILE m > 0 DO
    bit := st % 2;
    st := st / 2;
    IF bit = 0 THEN
      ec_add(rbx, rby, rax, ray, a,b,p);  # R1 ← point_add(R0, R1)
      ec_add(rax, ray, rax, ray, a,b,p);  # R0 ← point_double(R0)
    ELSE
      ec_add(rax, ray, rbx, rby, a,b,p);  # R0 ← point_add(R0, R1)
      ec_add(rbx, rby, rbx, rby, a,b,p);  # R1 ← point_double(R1)
    ENDIF
    m := m - 1;
  ENDWHILE
  x := rax;
  y := ray;
END

PROGRAM IS
  regx[4], regy[4], op, x, y, a, b, p, q,
  ra, rb, ta, tb, tc
IN
  READ p;
  READ q;
  READ a;
  READ b;
  READ x;
  READ y;
  REPEAT
    READ op;
    IF op = 0 THEN  # Load G
      READ ra;
      regx[ra] := x;
      regy[ra] := y;
    ENDIF
    IF op = 1 THEN  # Load (x,y)
      READ ra;
      READ regx[ra];
      READ regy[ra];
    ENDIF
    IF op = 4 THEN  # Write reg
      READ ra;
      WRITE regx[ra];
      WRITE regy[ra];
    ENDIF
    IF op = 5 THEN  # Check reg
      READ ra;
      rb := regy[ra];
      ra := regx[ra];
      ec_check(ta, ra, rb, a, b, p);
      WRITE ta;
    ENDIF
    IF op = 8 THEN  # Copy reg reg
      READ ra;
      READ rb;
      regx[ra] := regx[rb];
      regy[ra] := regy[rb];
    ENDIF
    IF op = 9 THEN  # Negate reg
      READ ra;
      ta := regx[ra];
      tb := regy[ra];
      ec_negate(ta, tb, a, b, p);
      regx[ra] := ta;
      regy[ra] := tb;
    ENDIF
    IF op = 10 THEN  # Add reg += reg
      READ ra;
      READ rb;
      tc := regy[rb];
      tb := regx[rb];
      ta := regy[ra];
      rb := regx[ra];
      ec_add(rb, ta, tb, tc, a, b, p);
      regx[ra] := rb;
      regy[ra] := ta;
    ENDIF
    IF op = 12 THEN  # Scalar reg *= x
      READ ra;
      READ rb;
      ta := regx[ra];
      tb := regy[ra];
      ec_mul(ta, tb, rb, a, b, p);
      regx[ra] := ta;
      regy[ra] := tb;
    ENDIF

  UNTIL op = 999;
END